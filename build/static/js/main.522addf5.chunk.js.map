{"version":3,"sources":["images/logo192.png","pages/Title.tsx","pages/Cards.tsx","config/api.ts","pages/Chars.tsx","pages/Country.tsx","pages/App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","width","maxWidth","backgroundColor","palette","text","secondary","fontWeight","dividerFullWidth","margin","spacing","dividerInset","Title","classes","className","alt","src","Logo","style","padding","display","List","ListItem","ListItemText","primary","marginLeft","fontFamily","fontSize","Cards","data","confirmed","recovered","deaths","lastUpdate","Grid","container","justify","item","xs","md","component","Card","CardContent","color","position","Typography","variant","gutterBottom","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","options","legend","Countries","handleCountryChange","setCountries","fetchAPI","FormControl","marginBottom","InputLabel","id","Select","onChange","e","target","i","App","state","setState","fetchedData","this","Country","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.522addf5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo192.9e5d4fc7.png\";","import React from \"react\";\nimport Logo from \"../images/logo192.png\";\nimport \"../styles/title.css\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      maxWidth: 360,\n      backgroundColor: theme.palette.text.secondary,\n      fontWeight: \"bold\",\n    },\n    dividerFullWidth: {\n      margin: `5px 0 0 ${theme.spacing(2)}px`,\n    },\n    dividerInset: {\n      margin: `5px 0 0 ${theme.spacing(9)}px`,\n    },\n  })\n);\n\nconst Title: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <div className='title'>\n      <img\n        alt='logo...'\n        src={Logo}\n        style={{ width: 400, padding: 30, display: \"inline-block\" }}\n      />\n      <List className={classes.root}>\n        <ListItem>\n          <ListItemText\n            primary='COVID-19 TODAY'\n            style={{\n              marginLeft: \"30%\",\n              fontFamily: \"monospace\",\n              fontSize: \"large\",\n            }}\n          />\n        </ListItem>\n      </List>\n    </div>\n  );\n};\n\nexport default Title;\n","import { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\n\nimport \"../styles/cards.css\";\n\nexport const Cards = ({\n  data: { confirmed, recovered, deaths, lastUpdate },\n}: any): JSX.Element => {\n  if (!confirmed) {\n    return (\n      <div className='ui segment'>\n        <div className='ui active inverted dimmer'>\n          <div className='ui large text loader'>Loading</div>\n        </div>\n        <p></p>\n        <p></p>\n        <p></p>\n      </div>\n    );\n  }\n\n  return (\n    <div className='App'>\n      <Grid container spacing={3} justify='center'>\n        <Grid item xs={12} md={3} component={Card}>\n          <CardContent\n            style={{\n              backgroundColor: \" #f48a04\",\n              color: \"White\",\n              padding: 20,\n              position: \"relative\",\n            }}>\n            <Typography variant='h5' color='primary' gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant='h4' component='h2'>\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={2.75}\n                separator=','\n              />\n            </Typography>\n            <Typography color='primary'>\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid item xs={12} md={3} component={Card}>\n          <CardContent\n            style={{\n              backgroundColor: \" #02ab02\",\n              color: \"White\",\n              padding: 20,\n              position: \"relative\",\n            }}>\n            <Typography variant='h5' color='primary' gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant='h4' component='h2'>\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={2.75}\n                separator=','\n              />\n            </Typography>\n            <Typography color='primary'>\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid item xs={12} md={3} component={Card}>\n          <CardContent\n            style={{\n              backgroundColor: \" #bf0325\",\n              color: \"White\",\n              padding: 20,\n              position: \"relative\",\n            }}>\n            <Typography variant='h5' color='primary' gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant='h4' component='h2'>\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={2.75}\n                separator=','\n              />\n            </Typography>\n            <Typography color='primary'>\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\ninterface ResponseData {\n  confirmed: object;\n  recovered: object;\n  deaths: object;\n  lastUpdate: string;\n}\nexport const fetchData = async (country: string) => {\n  let changeableUrl = url;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(changeableUrl);\n\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchDailyData: Function = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n\n    return data.map(\n      ({ confirmed, deaths, reportDate: date }: ResponseData | any) => ({\n        confirmed: confirmed.total,\n        deaths: deaths.total,\n        date,\n      })\n    );\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n\n    return countries.map((country: Object | any) => country.name);\n  } catch (error) {\n    return error;\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nimport { fetchDailyData } from \"../config/api\";\n\nimport \"../styles/charts.css\";\n\nconst Chart = ({\n  data: { confirmed, recovered, deaths },\n  country,\n}: any): JSX.Element => {\n  interface DailyData {\n    confirmed: object;\n    recovered: object;\n    deaths: object;\n  }\n\n  const [dailyData, setDailyData] = useState<[DailyData] | string[]>([\"\"]);\n\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const initialDailyData = await fetchDailyData();\n\n      setDailyData(initialDailyData);\n    };\n\n    fetchMyAPI();\n  }, []);\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\"#f48a04\", \"#02ab02\", \"#bf0325\"],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n      }}\n    />\n  ) : null;\n\n  const lineChart = dailyData[1] ? (\n    <Bar\n      data={{\n        labels: dailyData.map(({ date }: any) => date),\n        datasets: [\n          {\n            data: dailyData.map((data: any) => data.confirmed),\n            label: \"Infected\",\n            borderColor: \"#f48a04\",\n            backgroundColor: \"white\",\n          },\n          {\n            data: dailyData.map((data: any) => data.recovered),\n            label: \"Infected\",\n            borderColor: \"#f48a04\",\n            backgroundColor: \"white\",\n          },\n\n          {\n            data: dailyData.map((data: any) => data.deaths),\n            label: \"Deaths\",\n            borderColor: \"#bf0325\",\n            backgroundColor: \"white\",\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  return <div className='container'>{country ? barChart : barChart}</div>;\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { FormControl } from \"@material-ui/core\";\nimport Select from \"@material-ui/core/Select\";\nimport { fetchCountries } from \"../config/api\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport \"../styles/country.css\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst Countries = ({ handleCountryChange }: any) => {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountries(await fetchCountries());\n    };\n\n    fetchAPI();\n  }, []);\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <FormControl\n          style={{ width: \"300px\", marginBottom: 20 }}\n          variant='outlined'>\n          <InputLabel id='demo-simple-select-outlined-label'>\n            Worldwide\n          </InputLabel>\n          <Select\n            label='WorldWide'\n            onChange={(e) => handleCountryChange(e.target.value)}>\n            <option value=''>WorldWide</option>\n            {countries.map((country, i) => (\n              <option key={i} value={country}>\n                {country}\n              </option>\n            ))}\n          </Select>\n        </FormControl>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Countries;\n","import React from \"react\";\nimport \"../styles/App.css\";\nimport Title from \"./Title\";\nimport { Cards } from \"./Cards\";\nimport { fetchData } from \"../config/api\";\nimport Char from \"./Chars\";\nimport Country from \"./Country\";\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData(\"tunisia\");\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country: string) => {\n    const data = await fetchData(country);\n\n    this.setState({ data, country: country });\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className='App'>\n        <div className='header'>\n          <div>\n            <Title />\n            <Country handleCountryChange={this.handleCountryChange} />\n            <Cards data={data} />\n          </div>\n          <div>\n            <Char data={data} country={country} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./pages/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}